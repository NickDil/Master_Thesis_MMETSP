gold.ME = gold.data[query,]
apply(gold.data, 2, as.character )
df = apply(gold.data, 2, as.character )
df = as.data.frame(apply(gold.data, 2, as.character ))
View(df)
gold.ME = df[query,]
View(gold.ME)
unique(gold.ME$PROJECT.TYPE)
unique(gold.ME$KINGDOM)
table(gold.ME$KINGDOM)
table(as.character(gold.ME$KINGDOM))
gold.data = read.csv(path2Gold, header = T, na.strings=c(""," ","NA"))
gold.data$PROJECT.TYPE = as.character(toupper(gold.data$PROJECT.TYPE))
gold.data$DOMAIN = as.character(toupper(gold.data$DOMAIN))
gold.data$PROJECT.STATUS = as.character(toupper(gold.data$PROJECT.STATUS))
gold.data$PHYLUM = as.character(gold.data$PHYLUM)
query = gold.data$PROJECT.TYPE == "WHOLE GENOME SEQUENCING" & gold.data$DOMAIN == "EUKARYAL" & (gold.data$PROJECT.STATUS == "COMPLETE AND PUBLISHED" | gold.data$PROJECT.STATUS == "COMPLETE")
gold.ME = gold.data[query,]
gold.ME = as.matrix(apply(gold.ME, 2, as.character))
gold.ME = as.data.frame(apply(gold.ME, 2, as.character))
View(gold.ME)
table(gold.ME$PHYLUM)
table(gold.ME$KINGDOM)
n = nrow(gold.ME)
n
table(gold.ME$KINGDOM, gold.ME$PHYLUM)/n*100
table(gold.ME$PHYLUM, gold.ME$KINGDOM)/n*100
round(table(gold.ME$PHYLUM, gold.ME$KINGDOM)/n*100, 2)
gold.ME[is.na(gold.ME)]
gold.ME[is.na(gold.ME)] = "unknown"
round(table(gold.ME$PHYLUM, gold.ME$KINGDOM)/n*100, 2)
warnings()
gold.ME = gold.data[query,]
gold.ME[is.na(gold.ME)] = "unknown"
warnings()
#na.strings=c(""," ","NA")
gold.data = read.csv(path2Gold, header = T)
gold.data$PROJECT.TYPE = as.character(toupper(gold.data$PROJECT.TYPE))
gold.data$DOMAIN = as.character(toupper(gold.data$DOMAIN))
gold.data$PROJECT.STATUS = as.character(toupper(gold.data$PROJECT.STATUS))
gold.data$PHYLUM = as.character(gold.data$PHYLUM)
query = gold.data$PROJECT.TYPE == "WHOLE GENOME SEQUENCING" & gold.data$DOMAIN == "EUKARYAL" & (gold.data$PROJECT.STATUS == "COMPLETE AND PUBLISHED" | gold.data$PROJECT.STATUS == "COMPLETE")
gold.ME = gold.data[query,]
gold.ME = as.data.frame(apply(gold.ME, 2, as.character))
gold.ME[is.na(gold.ME)] = "unknown"
View(gold.ME)
#na.strings=c(""," ","NA")
gold.data = read.csv(path2Gold, header = T, na.strings=c(""," ","NA"))
gold.data$PROJECT.TYPE = as.character(toupper(gold.data$PROJECT.TYPE))
gold.data$DOMAIN = as.character(toupper(gold.data$DOMAIN))
gold.data$PROJECT.STATUS = as.character(toupper(gold.data$PROJECT.STATUS))
gold.data$PHYLUM = as.character(gold.data$PHYLUM)
query = gold.data$PROJECT.TYPE == "WHOLE GENOME SEQUENCING" & gold.data$DOMAIN == "EUKARYAL" & (gold.data$PROJECT.STATUS == "COMPLETE AND PUBLISHED" | gold.data$PROJECT.STATUS == "COMPLETE")
gold.ME1 = gold.data[query,]
View(gold.ME1)
View(gold.ME1)
is.na(gold.ME1[1,]
)
is.na(is.na(gold.ME1[1,]))
#na.strings=c(""," ","NA")
gold.data = read.csv(path2Gold, header = T)
gold.data$PROJECT.TYPE = as.character(toupper(gold.data$PROJECT.TYPE))
gold.data$DOMAIN = as.character(toupper(gold.data$DOMAIN))
gold.data$PROJECT.STATUS = as.character(toupper(gold.data$PROJECT.STATUS))
gold.data$PHYLUM = as.character(gold.data$PHYLUM)
query = gold.data$PROJECT.TYPE == "WHOLE GENOME SEQUENCING" & gold.data$DOMAIN == "EUKARYAL" & (gold.data$PROJECT.STATUS == "COMPLETE AND PUBLISHED" | gold.data$PROJECT.STATUS == "COMPLETE")
gold.ME1 = gold.data[query,]
gold.ME = as.data.frame(apply(gold.ME, 2, as.character))
gold.ME[is.na(gold.ME)] = "unknown"
gold.ME = gold.data[query,]
gold.ME[is.na(gold.ME)] = "unknown"
gold.ME[gold.ME == " "] = "unknown"
gold.ME[gold.ME == " "] = as.factor("unknown")
gold.ME[is.na(gold.ME)] = as.factor("unknown")
# GOLD DB (GOLD Release v.6 ) downloaded on apr 13 2018 15:20
path2Gold = "/home/nidil/GOLD/goldData.csv"
#na.strings=c(""," ","NA")
gold.data = read.csv(path2Gold, header = T)
gold.data$PROJECT.TYPE = as.character(toupper(gold.data$PROJECT.TYPE))
gold.data$DOMAIN = as.character(toupper(gold.data$DOMAIN))
gold.data$PROJECT.STATUS = as.character(toupper(gold.data$PROJECT.STATUS))
gold.data$PHYLUM = as.character(gold.data$PHYLUM)
query = gold.data$PROJECT.TYPE == "WHOLE GENOME SEQUENCING" & gold.data$DOMAIN == "EUKARYAL" & (gold.data$PROJECT.STATUS == "COMPLETE AND PUBLISHED" | gold.data$PROJECT.STATUS == "COMPLETE")
gold.ME = gold.data[query,]
gold.ME = as.data.frame(apply(gold.ME, 2, as.character))
gold.ME[is.na(gold.ME)] = as.factor("unknown")
gold.ME = gold.data[query,]
gold.ME = as.data.frame(apply(gold.ME, 2, as.character))
View(gold.ME)
rm(gold.data)
View(gold.ME)
rm(gold.data, query)
View(gold.ME)
gold.ME$PHYLUM
gold.phyla = gold.ME$PHYLUM
gold.phyla = replace(gold.ME$PHYLUM, " ", "unknown phylum")
gold.phyla
gold.phyla = replace(as.character(gold.ME$PHYLUM), " ", "unknown phylum")
gold.phyla
gold.phyla[gold.phyla == " "] = "unknown phylum"
gold.phyla
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "unknown kingdom"
round(table(gold.phyla, gold.ME$KINGDOM)/n*100, 2)
round(table(gold.phyla, gold.kingdom)/n*100, 2)
gold.phyla
gold.kingdom
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "unknown phylum"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "unknown kingdom"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
n = nrow(gold.ME)
n
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "unknown phylum"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "unknown kingdom"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
pie(gold.phyla)
pie(table(gold.phyla))
pie(table(gold.kingdom))
?pie
pie(table(gold.kingdom), edges = 20)
pie(table(gold.kingdom), edges = 200)
pie(table(gold.phyla), edges = 20)
pie(table(gold.phyla), edges = 4)
pie(table(gold.phyla), edges = 10)
pie(table(gold.phyla))
pie(table(gold.kingdom))
pie(table(gold.kingdom), labels = NA)
pie(table(gold.kingdom), labels = NA, legend(gold.kingdom))
pie(table(gold.kingdom), labels = NA)
legend(legend = unique(gold.kingdom) )
legend(1,1legend = unique(gold.kingdom) )
legend(1,1,legend = unique(gold.kingdom) )
colours()
library('randomcoloR')
colo = randomColor(length(unique(gold.kingdom)))
pie(table(gold.phyla), col = colo)
pie(table(gold.kingdom), col = colo)
col.phylum = randomColor(length(unique(gold.phyla)))
pie(table(gold.phyla), col = col.phylum)
legend(0.9,0.1,col = col.phylum)
legend(0.9,0.1, unique(gold.phyla,col = col.phylum)
)
legend(0.9,0.1, unique(gold.phyla, fill = col.phylum))
pie(table(gold.phyla), col = col.phylum)
legend(0.9,0.1, unique(gold.phyla, fill = col.phylum))
col.kingdom = randomColor(length(unique(gold.kingdom)))
pie(table(gold.kingdom), col = col.kingdom)
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
pie(table(gold.kingdom), col = col.kingdom)
col.kingdom = distinctColorPalette(length(unique(gold.kingdom)))
pie(table(gold.kingdom), col = col.kingdom)
legend(0.5, 0.5, unique(gold.kingdom), fill = col.kingdom)
legend(0.9, 0.5, unique(gold.kingdom), fill = col.kingdom)
legend(0.9, 0.9, unique(gold.kingdom), fill = col.kingdom)
legend(0.6, 0.9, unique(gold.kingdom), fill = col.kingdom)
legend(-1, 1, unique(gold.kingdom), fill = col.kingdom)
legend(-2, 1, unique(gold.kingdom), fill = col.kingdom)
legend(-1.5, 1, unique(gold.kingdom), fill = col.kingdom)
pie(table(gold.kingdom), col = col.kingdom)
legend(-1.5, 1, unique(gold.kingdom), fill = col.kingdom)
table(gold.phyla)
legend(0.9,0.1, table(gold.phyla), fill = col.phylum)
table(gold.phyla)
names(table(gold.phyla))
pie(table(gold.kingdom), col = col.kingdom)
legend(-1.5, 1, names(table(gold.kingdom)), fill = col.kingdom)
col.kingdom = distinctColorPalette(length(unique(gold.kingdom)))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
pie(table(gold.phyla), col = col.phylum)
legend(0.9,0.1, names(table(gold.phyla)), fill = col.phylum)
pie(table(gold.phyla), col = col.phylum, labels = NULL)
legend(0.9,0.1, names(table(gold.phyla)), fill = col.phylum)
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(0.9,0.1, names(table(gold.phyla)), fill = col.phylum)
legend(0.9,0.1, names(table(gold.phyla)), fill = col.phylum, horiz = T )
legend(0.9,0.1, names(table(gold.phyla)), fill = col.phylum, ncol = 2)
legend(-1.5,0.1, names(table(gold.phyla)), fill = col.phylum, ncol = 2)
legend(-1.5,1, names(table(gold.phyla)), fill = col.phylum, ncol = 2)
legend(-1.5,1, names(table(gold.phyla)), fill = col.phylum, ncol = 2, cex = 0.5)
legend(-1.5,1, names(table(gold.phyla)), fill = col.phylum, ncol = 2, cex = 0.75)
legend(-1.5,1, names(table(gold.phyla)), fill = col.phylum)
legend(-1.75,1, names(table(gold.phyla)), fill = col.phylum)
legend(-1.7,1, names(table(gold.phyla)), fill = col.phylum)
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum)
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum)
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
legend(-1.5,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.5,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom)
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom)
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom)
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = 0)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
col.kingdom = distinctColorPalette(length(unique(gold.kingdom)))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
colours()
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom)) - 1), "grey79")
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
table(gold.kingdom)
table(gold.phyla)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom)) - 1), "grey99")
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
names(table(gold.kingdom)) - "unkown kingdom"
names(table(gold.kingdom)) - c("unkown kingdom")
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "NA"
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
names(table(gold.kingdom))
names(table(gold.kingdom))$1
names(table(gold.kingdom))[1]
table(gold.kingdom)$
funghi
table(gold.kingdom)["funghi"]
table(gold.kingdom)["fungi"]
table(gold.kingdom)["Fungi"]
table(gold.kingdom)["unknown kingdom"]
table(gold.kingdom)["kingdom unknown"]
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "kingdom unknown"
table(gold.kingdom)["kingdom unknown"]
names(col.kingdom) = names(unique(gold.kingdom))
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(unique(col.phylum))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "phylum unknown"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "kingdom unknown"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(unique(col.phylum))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = " unknown kingdom"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = " unknown phylum"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(unique(col.phylum))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "unknown kingdom"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "unknown phylum"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(unique(col.phylum))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = ".unknown kingdom"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = ".unknown phylum"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(unique(col.phylum))
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
names(table(gold.kingdom))
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "phylum unknown"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "kingdom unknown"
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "phylum unknown"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "kingdom unknown"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.kingdom["kingdom unknown"] = "grey15"
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(unique(col.phylum))
col.kingdom["phylum unknown"] = "grey15"
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(unique(gold.kingdom))
col.kingdom["kingdom unknown"] = "grey15"
col.kingdom
names(col.kingdom)
names(unique(gold.kingdom))
unique(gold.kingdom)
names(col.kingdom) = names(table(gold.kingdom))
col.kingdom["kingdom unknown"] = "grey15"
col.kingdom
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names(table(gold.kingdom))
col.kingdom["kingdom unknown"] = "grey15"
col.kingdom
col.phylum = distinctColorPalette(length(unique(gold.phyla)))
names(col.phylum) = names(table(col.phylum))
col.phylum["phylum unknown"] = "grey15"
pie(table(gold.phyla), col = col.phylum, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phylum, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
names(table(col.phylum))
names(col.phylum) = names(table(gold.phylum))
col.phyla = distinctColorPalette(length(unique(gold.phyla)))
names(col.phyla) = names(table(gold.phyla))
col.phyla["phylum unknown"] = "grey15"
pie(table(gold.phyla), col = col.phyla, labels = "")
legend(-1.6,1, names(table(gold.phyla)), fill = col.phyla, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names(table(gold.kingdom)), fill = col.kingdom, cex = 0.8)
kk = names(table(gold.phyla))
kk[kk !+ = "phylum unknown"]
kk[kk != "phylum unknown"]
n = nrow(gold.ME)
n
gold.phyla = as.character(gold.ME$PHYLUM)
gold.phyla[gold.phyla == " "] = "phylum unknown"
gold.kingdom = as.character(gold.ME$KINGDOM)
gold.kingdom[gold.kingdom == " "] = "kingdom unknown"
round(table(gold.phyla, gold.kingdom)/n*100, 2)
names.phyla = names(table(gold.phyla))
names.kingdom = names(table(gold.kingdom))
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names.kingdom
col.kingdom["kingdom unknown"] = "grey15"
col.phyla = distinctColorPalette(length(unique(gold.phyla)))
names(col.phyla) = names.phyla
col.phyla["phylum unknown"] = "grey15"
pie(table(gold.phyla), col = col.phyla, labels = "")
legend(-1.6,1, c(names.phyla[names.phyla != "phylum unknown"], "phylum unknown"), fill = col.phyla, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, c(names.kingdom[names.kingdom != "kingdom unknown"], "kingdom unknown"), fill = col.kingdom, cex = 0.8)
c(names.kingdom[names.kingdom != "kingdom unknown"], "kingdom unknown")
legend(-1.6, 1, c(names.kingdom[names.kingdom != "kingdom unknown"], "kingdom unknown"), fill = col.kingdom, cex = 0.8)
round(table(gold.phyla, gold.kingdom)/n*100, 2)
names.phyla = names(table(gold.phyla))
names.kingdom = names(table(gold.kingdom))
names.kingdom = c(names.kingdom[names.kingdom != "kingdom unknown"], "kingdom unknown")
names.phyla = c(names.phyla[names.phyla != "phylum unknown"], "phylum unknown")
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names.kingdom
col.kingdom["kingdom unknown"] = "grey15"
col.phyla = distinctColorPalette(length(unique(gold.phyla)))
names(col.phyla) = names.phyla
col.phyla["phylum unknown"] = "grey15"
pie(table(gold.phyla), col = col.phyla, labels = "")
legend(-1.6,1, names.phyla, fill = col.phyla, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names.kingdom, fill = col.kingdom, cex = 0.8)
gold.kingdom
table(gold.phyla)
table.K = c(table(gold.kingdom)[table(gold.kingdom) != "kingdom unknown"], table(gold.kingdom)[table(gold.kingdom) == "kingdom unknown"])
table.K
table(gold.kingdom)[table(gold.kingdom) != "kingdom unknown"]
table(gold.kingdom)[names(table(gold.kingdom)) != "kingdom unknown"]
table.K = c(table(gold.kingdom)[names(table(gold.kingdom)) != "kingdom unknown"], table(gold.kingdom)[names(table(gold.kingdom)) == "kingdom unknown"])
table.K
round(table(gold.phyla, gold.kingdom)/n*100, 2)
table.K = c(table(gold.kingdom)[names(table(gold.kingdom)) != "kingdom unknown"], table(gold.kingdom)[names(table(gold.kingdom)) == "kingdom unknown"])
table.P = c(table(gold.phyla)[names(table(gold.phyla)) != "phylum unknown"], table(gold.phyla)[names(table(gold.phyla)) == "phylum unknown"])
table.K
table.P
names.kingdom = names(table.K)
names.phyla = names(table.P)
col.kingdom = c(distinctColorPalette(length(unique(gold.kingdom))))
names(col.kingdom) = names.kingdom
col.kingdom["kingdom unknown"] = "grey15"
col.phyla = distinctColorPalette(length(unique(gold.phyla)))
names(col.phyla) = names.phyla
col.phyla["phylum unknown"] = "grey15"
pie(table(gold.phyla), col = col.phyla, labels = "")
legend(-1.6,1, names.phyla, fill = col.phyla, cex = 0.8)
pie(table(gold.kingdom), col = col.kingdom, labels = '')
legend(-1.6, 1, names.kingdom, fill = col.kingdom, cex = 0.8)
pie(table.P, col = col.phyla, labels = "")
legend(-1.6,1, names.phyla, fill = col.phyla, cex = 0.8)
pie(table.K, col = col.kingdom, labels = '')
legend(-1.6, 1, names.kingdom, fill = col.kingdom, cex = 0.8)
table.K
names.kingdom
col.kingdom
table(gold.kingdom)
pie(table.P, col = col.phyla, labels = "")
legend(-1.6,1, names.phyla, fill = col.phyla, cex = 0.8)
table(gold.phyla)
setwd("~/Drives/nidil/Documents/Project_TRAPID/Scripts/Compare/R/R_scripts")
?heatmap
defaults = {dir.base : 'home/nidil/Documents/Project_TRAPID/Scripts/'}
defaults = {'dir.base' : 'home/nidil/Documents/Project_TRAPID/Scripts/'}
?dict
?dict()
defaults = c('heatmap_MMETSP_all_default','home/nidil/Documents/Project_TRAPID/Scripts/', NULL, NA, 1000 )
names(defaults) = c("name", "dir.base", "Rowv", "Colv", "min_trs")
defaults = c('heatmap_MMETSP_all_default','home/nidil/Documents/Project_TRAPID/Scripts/', NA, NA, 1000 )
names(defaults) = c("name", "dir.base", "Rowv", "Colv", "min_trs")
defaults
defaults['name']
defaults['test'] = 'test'
defaults
defaults["Colv"] = NULL
paste0(arguments_use["dir.base"],Compare/R/R_scripts/compare_functions.R)
arguments_use = c('heatmap_MMETSP_all_default','home/nidil/Documents/Project_TRAPID/Scripts/', 1000 )
names(arguments_use) = c("name", "dir.base", "min_trs")
source(paste0(arguments_use["dir.base"],Compare/R/R_scripts/compare_functions.R))
source(paste0(arguments_use["dir.base"],"Compare/R/R_scripts/compare_functions.R"))
arguments_use = c('heatmap_MMETSP_all_default','/home/nidil/Documents/Project_TRAPID/Scripts/', 1000 )
names(arguments_use) = c("name", "dir.base", "min_trs")
paste0(arguments_use["dir.base"],"Compare/R/R_scripts/compare_functions.R")
source(paste0(arguments_use["dir.base"],"Compare/R/R_scripts/compare_functions.R"))
paste0(arguments_use["dir.base"],"config_connect_trapid.json")
arguments_use["Rowv"]
arguments_use["Colv"]
setwd("~/Drives/nidil/Documents/Project_TRAPID/Scripts/Compare/R/R_scripts")
?file
?base::file
?base::open
cat("\n", paste(dim(X)))
c(2,2)[0]
x = c(1,2,3,5)
x[0]
x[1]
paste(x[1],x[2])
cat(paste(x[1],x[2]))
print(paste(x[1],x[2]))
getwd()
# make sure all connections closed
lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
# Dependencies
suppressMessages(library('RMySQL'))
library('rjson')
library('glue')
suppressMessages(library('plyr'))
suppressMessages(library('dplyr'))
library("ggplot2")
# make sure all connections closed
lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
# Dependencies
library('RMySQL')
library('rjson')
library('glue')
library('plyr')
library('dplyr')
library("ggplot2")
library('randomcoloR')
library('rCharts')
library('rbokeh')
library('taxize')
source("compare_functions.R")
setwd("~/Drives/nidil/Documents/Project_TRAPID/Scripts/Compare/R/R_scripts")
source("compare_functions.R")
# transcript configuration data to connect to DB
config <- fromJSON(file="../../../config_connect_trapid.json")
# get selection of experiments
usr_id = 65
All_experiments = select_exp(config = config, user_id = 65)
All_experiments= transcripts_count(config, All_experiments)
All_experiments= get_coreGF_score(All_experiments)
View(All_experiments)
ggplot(data = All_experiments, aes(x=completeness_score, fill = desc_query)) +
geom_histogram(alpha = 0.3, binwidth = 0.05, position = 'identity') +
geom_vline(data = vlines,aes(xintercept = xint,colour = mean.score), linetype = "dashed")
ggplot(data = All_experiments, aes(x=completeness_score, fill = desc_query)) +
geom_histogram(alpha = 0.3, binwidth = 0.05, position = 'identity')
NOG.matrix = GF_comparison_collapsed(config, All_experiments)
