
# functions for the compare.R scripts

# Dependencies
library('RMySQL')
library('rjson')
library('glue')
library('plyr')
library('dplyr')
library("ggplot2")
library('randomcoloR')
library('rCharts')
library('rbokeh')

########## FUNCTIONS ##########

get_user_ID <- function(config, name){
  
  mydb = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname=config$trapid_db_name, host=config$trapid_db_server)
  SQLquery = glue("SELECT user_id from authentication where email LIKE '{name}%'")
  rs = dbGetQuery(mydb, SQLquery)
  #print(usrid)
  dbDisconnect(mydb)
  return(rs)
}

merge_exp <- function(dfA, dfB, by = 'experiment_id'){
  df_out = inner_join(dfA, dfB, by = by)
  return(df_out)
}

select_exp <- function(config, user_id, desc_query = NULL, tax_id = NULL, refDB_query = NULL, minimal_nr_transcripts = 1, color = randomColor(1)){
  mydb = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname=config$trapid_db_name, host=config$trapid_db_server)
  select_query = "SELECT experiments.experiment_id, experiments.title"
  from_query = " from experiments"
  where_query = glue(" WHERE experiments.user_id = {user_id}")
  grp_query = ""
  
  if (!is.null(desc_query)){
    for (qq in desc_query){
      where_query = paste0(where_query, glue(" AND experiments.description LIKE '%{qq}%'"))
    }
  }
  
  if (!is.null(refDB_query)){
    for (qq in refDB_query){
      where_query = paste0(where_query, glue(" AND experiments.used_plaza_database LIKE '%{qq}%'"))
    }
  }
  
  
  if (!is.null(tax_id)){
    if (is.character(tax_id)){
      mini_query = glue_sql("SELECT txid FROM full_taxonomy WHERE scname IN ({tax_id*})", .con = mydb)
      tax_id = dbGetQuery(mydb, mini_query)
      tax_id = tax_id$txid
    }
    
    from_query = " FROM transcripts_tax LEFT JOIN experiments ON transcripts_tax.experiment_id = experiments.experiment_id"
    where_query = paste0(where_query, glue_sql(" AND transcripts_tax.txid IN ({tax_id*})", .con = mydb))
    grp_query = paste0(grp_query, glue(" GROUP BY experiment_id HAVING COUNT(transcripts_tax.txid)  >= {minimal_nr_transcripts}"))
  }
  
  
  # SQLquery = glue("SELECT experiment_id, title from experiments where user_id = {user_id} AND description LIKE '%{desc_query}%'")
  SQLquery = paste0(select_query, from_query, where_query, grp_query)
  # print(SQLquery)
  rs = dbGetQuery(mydb, SQLquery)
  
  dbDisconnect(mydb)
  
  out = rs[order(rs$title),]
  out["color_label"] = color
  out["desc_query"] = paste(desc_query, collapse=', ' )
  out["tax_query"] = paste(tax_id, collapse=', ' )
  out["refDB_query"] = paste(refDB_query, collapse=', ' )
  out["unique_title"] = paste(out$title, out$desc_query, out$refDB_query, out$ out$tax_id)
  
  out = add_MMETSP_annotation(config, out)
  
  print(paste("You have selected",length(rs$title), "experiments! With color label =", color))
  
  return(out)
}

transcripts_count <- function(config, df){
  print(paste("START counting transcripts:", format(Sys.time(), "%X")))
  exp_ids = df$experiment_id
  SQLquery = glue_sql("SELECT experiment_id, COUNT(experiment_id) FROM transcripts WHERE experiment_id IN ({exp_ids*}) GROUP BY experiment_id", .con = mydb)
  
  mydb = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname=config$trapid_db_name, host=config$trapid_db_server)
  rs = dbGetQuery(mydb, SQLquery)
  dbDisconnect(mydb)
  
  colnames(rs) = c("experiment_id", "transcripts_count")
  out = merge_exp(df, rs)
  print(paste("STOP counting transcripts:", format(Sys.time(), "%X")))
  return(out)
}

transcripts_in_GF_count <- function(config, df){
  print(paste("START counting transcripts in GF:", format(Sys.time(), "%X")))
  exp_ids = df$experiment_id
  SQLquery = glue_sql("SELECT experiment_id, COUNT(gf_id) from transcripts WHERE experiment_id IN ({exp_ids*}) GROUP BY experiment_id", .con = mydb)
  
  mydb = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname=config$trapid_db_name, host=config$trapid_db_server)
  rs = dbGetQuery(mydb, SQLquery)
  dbDisconnect(mydb)
  
  colnames(rs) = c("experiment_id", "transcripts_in_GF_count")
  out = merge_exp(df, rs)
  print(paste("STOP counting transcripts in GF:", format(Sys.time(), "%X")))  
  return(out)
}

tax_composition <- function(config, df1){
  print(paste("START summarizing taxonomic binning results:", format(Sys.time(), "%X")))  
  exp_ids = df1$experiment_id
  
  mydb = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname=config$trapid_db_name, host=config$trapid_db_server)
  SQL_compo = glue_sql("select experiment_id, full_taxonomy.scname, full_taxonomy.tax, transcripts_tax.txid, count(transcripts_tax.txid) 
                       from transcripts_tax left join full_taxonomy on transcripts_tax.txid = full_taxonomy.txid 
                       where transcripts_tax.experiment_id IN ({exp_ids*}) 
                       GROUP BY transcripts_tax.txid, experiment_id", .con = mydb)
  
  rs = dbGetQuery(mydb, SQL_compo)
  dbDisconnect(mydb)
  
  # rs[is.na(rs)] <-"Unclassified"
  colnames(rs) = c("experiment_id", "scname", "tax", "txid", "trs")
  rs["phylum"] = lapply(rs$tax, get_phylum)
  out = merge_exp(df1, rs)
  out['percentage'] = out$trs/out$transcripts_count
  print(paste("STOP summarizing taxonomic binning results:", format(Sys.time(), "%X")))  
  
  return(out)
}

plot_tax_composition <- function(df, cutoff = 0.10, title = "Taxonomic composition"){
  if (cutoff < 1){
    x_plt = df[df$percentage >= cutoff,]
    switchP = TRUE
  } else {
    x_plt = df[df$trs >= cutoff,]
    switchP = FALSE
  }
  
  # Create "OTHER" category
  tot_select = aggregate(cbind(trs, percentage) ~ experiment_id, data=x_plt, FUN=sum)
  tot = aggregate(. ~ experiment_id, data=x_plt, FUN=unique)
  rest_trs = as.numeric(levels(tot$transcripts_count))[tot$transcripts_count] - tot_select$trs
  rest_percentage = 1 - tot_select$percentage
  other_df = as.data.frame(tot)
  other_df["scname"] = "other"
  other_df["trs"] = rest_trs
  other_df["percentage"] = rest_percentage
  
  x_plt_out = merge(x_plt, other_df, all = TRUE)
  
  # PLOTTING
  
  if (switchP){
    x_plt_out <- ddply(x_plt_out, .(unique_title),
                       transform, pos = 1-(cumsum(percentage) - (0.5 * percentage)))
    plt <- ggplot() + geom_bar(aes(y = percentage, x = unique_title, fill = scname), data = x_plt_out, stat="identity") 
    plt = plt + labs(x="", y="percentage") + 
      scale_y_continuous(labels = scales::percent) + 
      ggtitle(paste0(title, ", cutoff=", cutoff*100, "% of transcripts"))
    plt = plt + geom_text(data=x_plt_out, aes(y = pos, x = unique_title, label = paste0(round(percentage, 3)*100,"%")), size=3)
  }else{
    
    plt <- ggplot() + geom_bar(aes(y = trs, x = title, fill = scname), data = x_plt_out, stat="identity")
    plt = plt + labs(x="", y="transcript count") + ggtitle(paste0(title, ", cutoff=", cutoff, " transcripts"))
  }
  plt = plt + theme(legend.title = element_blank(),legend.position="bottom", legend.direction="horizontal") + coord_flip()
  
  
  return(plt)
  
}

GF_comparison_naive <- function(config, df){
  exp_id = df$experiment_id[1]
  out = dbGetQuery(mydb, glue_sql("SELECT plaza_gf_id FROM gene_families WHERE experiment_id = {exp_id}", .con = mydb))
  out[paste(exp_id)] = 1
  
  mydb = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname=config$trapid_db_name, host=config$trapid_db_server)
  
  for (i in seq(2, nrow(df))){
    exp_id = df$experiment_id[i]
    rs = dbGetQuery(mydb, glue_sql("SELECT plaza_gf_id FROM gene_families WHERE experiment_id = {exp_id}", .con = mydb))
    rs[paste(exp_id)] = 1
    out = merge(out, rs, all = TRUE)
  }
  
  dbDisconnect(mydb)
  out[is.na(out)] = 0
  return(data.frame(out))
  
}

do_all_after_select <- function(config, df, user_id){
  # copy df
  out = df

  # Count transcripts 
  out = transcripts_count(config, out)
  
  # Count transcripts in GF
  out = transcripts_in_GF_count(config, out)
  
  # normalized GF counts
  out["GF_inclusion_ratio"] = out$transcripts_in_GF_count/out$transcripts_count
  
  return(out)
  
}

add_toptax <- function(df, tax_df){
  # df is added to create less confusion but is not used :)
  tax_attrib = tax_df %>% group_by(title) %>% filter(!is.na(scname)) %>% filter(percentage == max(percentage))
  df['toptax'] = tax_attrib$scname
  df['toptax_trs'] = tax_attrib$trs
  df['toptax_percentage'] = tax_attrib$percentage
  
  return(df)
}

add_MMETSP_annotation <- function(config, df){
  
  titles = df$title
  
  mydb.meta = dbConnect(MySQL(), user=config$trapid_db_user, password=config$trapid_db_pswd, dbname= 'db_trapid_mmetsp_metadata', host=config$trapid_db_server)
  SQL_query = glue_sql("Select sample_name, phylum, genus, species FROM mmetsp_sample_attr where sample_name IN ({titles*})", .con = mydb.meta)
  rs = dbGetQuery(mydb.meta, SQL_query)
  dbDisconnect(mydb.meta)
  
  colnames(rs) = c('title', 'MMETSP_phylum', 'MMETSP_genus', 'MMETSP_species')
  df = merge_exp(df, rs, by = "title")
  
  return(df)
}

get_phylum <- function(tax) {
  out = tail(unlist(strsplit(tax, ";")),4)[1]
  return(out)
  
}